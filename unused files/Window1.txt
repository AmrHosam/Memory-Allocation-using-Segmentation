self.segment_table = QtWidgets.QTableWidget()
        self.segment_table.setEnabled(True)
        self.segment_table.setMinimumHeight(200)
        self.segment_table.setMinimumWidth(250)
        # sizePolicy = QtWidgets.QSizePolicy(
        #     QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        # sizePolicy.setHorizontalStretch(0)
        # sizePolicy.setVerticalStretch(0)
        # sizePolicy.setHeightForWidth(
        #     self.segment_table.sizePolicy().hasHeightForWidth())
        # self.segment_table.setSizePolicy(sizePolicy)
        self.segment_table.horizontalHeader().setSectionResizeMode(
            QtWidgets.QHeaderView.Stretch)
        self.segment_table.setRowCount(1)
        self.segment_table.setColumnCount(2)
        self.segment_table.setObjectName("segment_table")
        item = QtWidgets.QTableWidgetItem()
        self.segment_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.segment_table.setHorizontalHeaderItem(1, item)
        self.tableLayout = QtWidgets.QHBoxLayout()
        self.tableLayout.addWidget(self.segment_table)
        self.windowVLayout.addLayout(self.tableLayout)

        self.enter = QtWidgets.QPushButton()
        self.enter.setObjectName("enter")
        self.enter.setMaximumWidth(200)
        self.btnLayout = QtWidgets.QHBoxLayout()
        self.btnLayout.addWidget(self.enter)
        self.windowVLayout.addLayout(self.btnLayout)
        
        
        def ReadTable(self):
        alloc = self.get_allocation()
        seg_list = []
        error = ""
        out = Process()
        success = bool

        self.memdata = self.output_window.Memory.MemData

        num = self.get_no_segements()
        print(self.segment_table.item(0, 0))
        for row in range(num):
            it = self.segment_table.item(row, 0)
            if it == None:
                name = ""
            else:
                name = str(self.segment_table.item(row, 0).text())
            if(name == ""):
                error = name + "Segement name is required"
                break

            it = self.segment_table.item(row, 1)
            if it == None:
                size = ""
            else:
                size = self.segment_table.item(row, 1).text()

            if(not size.isdigit()):
                error = name + " size must be a postive integer"
                break
            elif(size == ""):
                error = name + "Segement size is required"
                break
            else:
                size = int(size)
            if(size < 0):
                error = name + " size must be >= 0"
                break
        if(error != ""):
            _translate = QtCore.QCoreApplication.translate
            self.error.setText(_translate("segment_window", error))
            self.error.show()
            return
        for row in range(num):
            s = Segment(str(self.segment_table.item(row, 0).text()),
                        int(self.segment_table.item(row, 1).text()), out)
            seg_list.append(s)
        if (alloc == 0):  # first fit
            success = self.memdata.firstFit(out)
        elif (alloc == 1):  # Best fit
            success = self.memdata.bestFit(out)
        elif (alloc == 2):  # worst fit
            success = self.memdata.worstFit(out)
        if(success == False):
            error = "Must deallocate"
            _translate = QtCore.QCoreApplication.translate
            self.error.setText(_translate("segment_window", error))
            self.error.show()
        else:
            self.output_window.RefreshMemory()
            self.window.close()


 def get_no_segements(self):
        num = self.no_segment.value()
        return num
